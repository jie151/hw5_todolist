{"version":3,"sources":["TodoList.js","TodoAddForm.js","TodoHeader.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","handleChange","event","updateTodo","props","todoItems","currentTarget","name","value","console","log","updateTodos","index","toggleCheckbox","checked","className","this","isCompleted","type","onChange","todo","onClick","removeToDoItem","React","Component","TodoForm","todoRef","createRef","addItemOnList","e","preventDefault","todoItem","current","addToDoItems","reset","id","onSubmit","ref","required","TodoTitle","App","state","item","items","Date","now","setState","todos","key","updatedTodo","TodoAddForm","Object","keys","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAgDeA,E,4MA7CbC,aAAe,SAAAC,GACb,IAAMC,EAAU,2BACX,EAAKC,MAAMC,WADA,kBAEbH,EAAMI,cAAcC,KAAOL,EAAMI,cAAcE,QAElDC,QAAQC,IAAIR,EAAMI,cAAcE,OAChC,EAAKJ,MAAMO,YAAY,EAAKP,MAAMQ,MAAOT,I,EAG3CU,eAAiB,SAAAX,GACf,IAAMC,EAAU,2BACX,EAAKC,MAAMC,WADA,kBAEbH,EAAMI,cAAcC,KAAOL,EAAMI,cAAcQ,UAElD,EAAKV,MAAMO,YAAY,EAAKP,MAAMQ,MAAOT,I,4CAG3C,WAAU,IAAD,OACP,OACE,qBAAIY,UAAWC,KAAKZ,MAAMC,UAAUY,YAAc,OAAS,KAA3D,UACE,uBACEC,KAAK,WACLX,KAAK,cACLO,QAASE,KAAKZ,MAAMC,UAAUY,YAC9BE,SAAUH,KAAKH,iBAGjB,uBACEK,KAAK,OACLX,KAAK,OACLC,MAAOQ,KAAKZ,MAAMC,UAAUe,KAC5BD,SAAUH,KAAKf,eAGjB,wBACEc,UAAU,UACVM,QAAS,kBAAM,EAAKjB,MAAMkB,eAAe,EAAKlB,MAAMQ,QAFtD,sB,GAnCeW,IAAMC,WCuBdC,E,4MAtBbC,QAAUH,IAAMI,Y,EAEhBC,cAAgB,SAAAC,GACdA,EAAEC,iBACF,IAAMC,EAAW,CACfX,KAAM,EAAKM,QAAQM,QAAQxB,MAC3BS,aAAa,GAEf,EAAKb,MAAM6B,aAAaF,GACxBF,EAAEvB,cAAc4B,S,4CAGlB,WACE,OACE,uBAAMC,GAAG,gBAAgBC,SAAUpB,KAAKY,cAAxC,UACE,uBAAOV,KAAK,OAAOX,KAAK,aAAa8B,IAAKrB,KAAKU,QAASY,UAAQ,IAChE,mD,GAjBef,IAAMC,WCOde,E,4JALX,WACI,OAAO,mD,GAFSf,aCkDTgB,E,4MA9CbC,MAAQ,CACNpC,UAAW,I,EAGb4B,aAAe,SAAAS,GACb,IAAMC,EAAK,eAAQ,EAAKF,MAAMpC,WAC9BI,QAAQC,IAAIiC,GACZA,EAAM,OAAD,OAAQC,KAAKC,QAAWH,EAC7B,EAAKI,SAAS,CACZzC,UAAWsC,K,EAIfrB,eAAiB,SAAAoB,GACf,IAAMK,EAAK,eAAQ,EAAKN,MAAMpC,kBACvB0C,EAAML,GACb,EAAKI,SAAS,CAAEzC,UAAW0C,K,EAG7BpC,YAAc,SAACqC,EAAKC,GAClB,IAAMF,EAAK,eAAQ,EAAKN,MAAMpC,WAC9B0C,EAAMC,GAAOC,EACb,EAAKH,SAAS,CAAEzC,UAAW0C,K,4CAG7B,WAAU,IAAD,OACP,OACE,sBAAKhC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAACmC,EAAD,CAAajB,aAAcjB,KAAKiB,eAChC,6BACGkB,OAAOC,KAAKpC,KAAKyB,MAAMpC,WAAWgD,KAAI,SAAAL,GAAG,OACxC,cAAC,EAAD,CAEEpC,MAAOoC,EACP3C,UAAW,EAAKoC,MAAMpC,UAAU2C,GAChC1B,eAAgB,EAAKA,eACrBX,YAAa,EAAKA,aAJbqC,e,GAlCDxB,aCMH8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5175e708.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass TodoList extends React.Component {\r\n  handleChange = event => {\r\n    const updateTodo = {\r\n      ...this.props.todoItems,\r\n      [event.currentTarget.name]: event.currentTarget.value\r\n    };\r\n    console.log(event.currentTarget.value);\r\n    this.props.updateTodos(this.props.index, updateTodo);\r\n  };\r\n\r\n  toggleCheckbox = event => {\r\n    const updateTodo = {\r\n      ...this.props.todoItems,\r\n      [event.currentTarget.name]: event.currentTarget.checked\r\n    };\r\n    this.props.updateTodos(this.props.index, updateTodo);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li className={this.props.todoItems.isCompleted ? \"done\" : null}>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"isCompleted\"\r\n          checked={this.props.todoItems.isCompleted}\r\n          onChange={this.toggleCheckbox}\r\n          // checked={this.props.todoItems.isChecked}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          value={this.props.todoItems.todo}\r\n          onChange={this.handleChange}\r\n        />\r\n        {/* <button>Edit</button> */}\r\n        <button\r\n          className=\"del-btn\"\r\n          onClick={() => this.props.removeToDoItem(this.props.index)}\r\n        >\r\n          x\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n/*import React from \"react\";\r\nimport TodoListItem from \"./TodoItem\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport default class TodoList extends React.Component {\r\n    render() {\r\n      var items = this.props.items.map((item, index) => {\r\n        return (\r\n          <TodoListItem\r\n            key={index}\r\n            item={item}\r\n            index={index}\r\n            removeItem={this.props.removeItem}\r\n            TodoDone={this.props.TodoDone}\r\n          />\r\n        );\r\n      });\r\n      return <ul className=\"list-group\"> {items} </ul>;\r\n    }\r\n  }*/","import React from \"react\";\r\n\r\nclass TodoForm extends React.Component {\r\n  todoRef = React.createRef();\r\n\r\n  addItemOnList = e => {\r\n    e.preventDefault();\r\n    const todoItem = {\r\n      todo: this.todoRef.current.value,\r\n      isCompleted: false\r\n    };\r\n    this.props.addToDoItems(todoItem);\r\n    e.currentTarget.reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"todoList-form\" onSubmit={this.addItemOnList}>\r\n        <input type=\"text\" name=\"todosTxtbx\" ref={this.todoRef} required />\r\n        <button>submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React from \"react\";\r\n\r\nexport default class AddForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    //this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({value:event.target.value});\r\n  }\r\n  handleSubmit(event) {\r\n    isCompleted:false\r\n    event.preventDefault();\r\n    var newItemValue = this.refs.itemName.value;\r\n    if(newItemValue) {\r\n      this.props.addItem({newItemValue});\r\n      this.refs.form.reset();\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n        <form ref=\"form\" onSubmit ={this.handleSubmit}>\r\n          <input type=\"text\" ref=\"itemName\" className=\"add-todo\" placeholder= \"add a new todo...\" \r\n          value={this.state.value} onChange={this.handleChange} />\r\n          <input type=\"submit\" value=\"Submit\"/>\r\n        </form>\r\n      /*<form ref=\"form\" onSubmit={this.onSubmit} className=\"form-inline\">\r\n        <input type=\"text\" ref=\"itemName\" className=\"form-control\" placeholder=\"add a new todo\"/>\r\n        <button type=\"submit\" className=\"btn btn-default\">Submit</button> \r\n      </form>\r\n    );   \r\n  }\r\n} */","import React, { Component } from 'react';\r\n\r\n\r\nclass TodoTitle extends Component {\r\n    render () {\r\n        return <h1>CGU Todo list</h1>\r\n    }\r\n}\r\n\r\nexport default TodoTitle;","import \"./App.css\";\nimport React, {Component} from \"react\";\nimport TodoList from \"./TodoList\";\nimport TodoAddForm from \"./TodoAddForm\";\nimport TodoTitle from \"./TodoHeader\";\n\nclass App extends Component {\n  state = {\n    todoItems: {}\n  };\n\n  addToDoItems = item => {\n    const items = { ...this.state.todoItems };\n    console.log(items);\n    items[`item${Date.now()}`] = item;\n    this.setState({\n      todoItems: items\n    });\n  };\n\n  removeToDoItem = item => {\n    const todos = { ...this.state.todoItems };\n    delete todos[item];\n    this.setState({ todoItems: todos });\n  };\n\n  updateTodos = (key, updatedTodo) => {\n    const todos = { ...this.state.todoItems };\n    todos[key] = updatedTodo;\n    this.setState({ todoItems: todos });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoTitle />\n        <TodoAddForm addToDoItems={this.addToDoItems} />\n        <ul>\n          {Object.keys(this.state.todoItems).map(key => (\n            <TodoList\n              key={key}\n              index={key}\n              todoItems={this.state.todoItems[key]}\n              removeToDoItem={this.removeToDoItem}\n              updateTodos={this.updateTodos}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}